apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-rc
spec:
  serviceName: "kafka-pod"
  replicas: 1
  selector:
    matchLabels:
      app: kafka-pod
#  selector:
#    name: kafka-pod
  template:
    metadata:
      labels: 
#        name: kafka-pod
        app: kafka-pod
    spec:
      tolerations: #快速驱离pod到其他节点
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 2
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 2
#      hostNetwork: true
#      dnsPolicy: ClusterFirstWithHostNet
      hostAliases:
#      - ip: "192.168.1.5"
#        hostnames:
#        - "fuck.kafka"
      containers:
      - name: kafka
        image: 192.168.1.4:5000/liangguohun/kafka:1.0 
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          value: Asia/Shanghai
        - name: KAFKA_ADVERTISED_HOST_NAME 
          valueFrom: 
            fieldRef: 
              fieldPath: status.hostIP
        - name: ZOOKEEPER_DATADIR
          value: "/workspace/data"
        ports:
        - name: kafka
          containerPort: 9092
        volumeMounts:
        - mountPath: /tmp/kafka-logs 
          name: log-data
        - mountPath: /var/app/config/server.properties 
          name: kafka-conf
          subPath: server.properties
        - mountPath: /var/run/docker.sock
          name: connect
      restartPolicy: "Always"
      volumes:
      - name: connect
        hostPath: 
          path: /var/run/docker.sock
      - name: log-data
        persistentVolumeClaim:
          claimName: kafka-claim
      - name: kafka-conf
        configMap:
          name: kafka-conf
